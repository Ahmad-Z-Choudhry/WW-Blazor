@page "/searchticker"
@using Models
@inject ApiService ApiService
@using Components

<div class="container mt-4">
    <div class="input-group mb-3">
        <input type="text" class="form-control" @bind="ticker" @bind:event="oninput" @onkeypress="HandleKeyPress" placeholder="Search Ticker" />
        <div class="input-group-append">
            <button class="btn btn-primary" @onclick="Search_Ticker">Search</button>
        </div>
    </div>

    @if (isLoading)
    {
        <p><em>Loading...</em></p>
    }
    else if (errorMessage != null)
    {
        <p class="text-danger">@errorMessage</p>
    }
    else if (stockData != null)
    {
        <div class="card mt-4">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <div>
                        <h4 class="card-title">@stockData.Ticker (@stockData.RealtimePrice)</h4>
                    </div>
                    <div>
                        @if (isInPortfolio)
                        {
                            <button class="btn btn-danger" @onclick="RemoveFromPortfolio">Remove from Portfolio</button>
                        }
                        else
                        {
                            <button class="btn btn-success" @onclick="AddToPortfolio">Add to Portfolio</button>
                        }
                    </div>
                </div>
                <p class="card-text">@stockData.About.Description</p>
                
                <h5>Info</h5>
                <ul class="list-group">
                    <li class="list-group-item">Previous Close: @stockData.Info.PreviousClose</li>
                    <li class="list-group-item">Market Cap: @stockData.Info.MarketCap</li>
                    <li class="list-group-item">Day Range: @stockData.Info.DayRange.Low - @stockData.Info.DayRange.High</li>
                    <li class="list-group-item">Year Range: @stockData.Info.YearRange.Low - @stockData.Info.YearRange.High</li>
                    <li class="list-group-item">PE Ratio: @stockData.Info.PeRatio</li>
                    <li class="list-group-item">Dividend Yield: @stockData.Info.DividendYield</li>
                    <li class="list-group-item">Primary Exchange: @stockData.Info.PrimaryExchange</li>
                    <li class="list-group-item">Average Volume: @stockData.Info.AverageVolume</li>
                </ul>

                @* <h5 class="mt-4">Historical Prices</h5>
                <HistoricalChart HistoricalPrices="stockData.GraphInfo.HistoricalPrices" /> *@

                @* <h5 class="mt-4">Hourly Prices</h5>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Hour</th>
                            <th>Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var priceData in stockData.GraphInfo.HourlyPrices)
                        {
                            <tr>
                                <td>@priceData.Date</td>
                                <td>@priceData.Price</td>
                            </tr>
                        }
                    </tbody>
                </table> *@
            </div>
        </div>
    }
</div>

@code {
    private string ticker;
    private StockData stockData;
    private bool isLoading;
    private string errorMessage;
    private bool isInPortfolio;

    private async Task Search_Ticker()
    {
        isLoading = true;
        errorMessage = null;
        stockData = null;

        try
        {
            ticker = ticker.ToUpper(); // Ensure the ticker is uppercase before searching
            stockData = await ApiService.FetchStockData(ticker);
            if (stockData == null)
            {
                errorMessage = "Ticker not in our database.";
            }
            else
            {
                await CheckIfTickerInPortfolio();
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Ticker not in our database.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CheckIfTickerInPortfolio()
    {
        var response = await ApiService.FetchTickers("achoudhry@Wintellisys.com"); // Replace with actual username logic
        var tickers = await response.Content.ReadFromJsonAsync<List<string>>();
        isInPortfolio = tickers?.Contains(ticker.ToUpper()) ?? false;
    }

    private async Task AddToPortfolio()
    {
        var response = await ApiService.AddToPortfolio(ticker, "achoudhry@Wintellisys.com"); // Replace with actual username logic
        if (response.IsSuccessStatusCode)
        {
            isInPortfolio = true;
        }
    }

    private async Task RemoveFromPortfolio()
    {
        var response = await ApiService.RemoveFromPortfolio(ticker, "achoudhry@Wintellisys.com"); // Replace with actual username logic
        if (response.IsSuccessStatusCode)
        {
            isInPortfolio = false;
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            ticker = ticker.ToUpper(); // Ensure the ticker is uppercase before searching
            await Search_Ticker();
        }
    }
}
