@page "/history"
@using System.Net.Http
@using System.Net.Http.Json
@using MyBlazorApp.Models
@inject ApiService ApiService
@inject TickerService TickerService
@using System.Text.Json

<h3>History Data</h3>

@if (loading)
{
    <p><em>Loading...</em></p>
}
else if (historyData == null || !historyData.Any())
{
    <p>No history data found.</p>
}
else
{
    <div>
        <p><strong>Bullish Accuracy:</strong> @accuracy?.BullishAccuracy @if(isCalculating) { <span>(calculating...)</span> }</p>
        <p><strong>Bearish Accuracy:</strong> @accuracy?.BearishAccuracy @if(isCalculating) { <span>(calculating...)</span> }</p>
        <p><strong>Total Accuracy:</strong> @accuracy?.TotalAccuracy @if(isCalculating) { <span>(calculating...)</span> }</p>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Ticker</th>
                <th>Date</th>
                <th>Price</th>
                <th>Generated Prediction</th>
                <th>Detailed Prediction</th>
                <th>Actual Result</th> <!-- New column -->
            </tr>
        </thead>
        <tbody>
            @foreach (var item in historyData)
            {
                <tr>
                    <td>@item.ticker</td>
                    <td>@item.Date.ToString("yyyy-MM-dd")</td>
                    <td>@item.closing_price</td>
                    <td>@item.integrated_output?.general_prediction</td>
                    <td>@item.integrated_output?.detailed_prediction</td>
                    <td>@item.real_result</td> <!-- Display actual result -->
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private bool loading = true;
    private bool isCalculating = true;
    private List<HistoryData> historyData;
    private Accuracy accuracy;
    private (DateTime startDate, DateTime endDate) dateRange = (DateTime.Now.AddMonths(-3), DateTime.Now);

    protected override async Task OnInitializedAsync()
    {
        await LoadHistoryData();
    }

    private async Task LoadHistoryData()
    {
        try
        {
            await TickerService.FetchTickers("achoudhry@Wintellisys.com"); // Replace with actual username logic
            var tickers = TickerService.Tickers;

            // Fetch the raw JSON response
            var response = await ApiService.FetchHistoryDataAsHttpResponse(tickers, dateRange);
            var jsonResponse = await response.Content.ReadAsStringAsync();

            // Log the raw JSON response
            Console.WriteLine($"Response JSON: {jsonResponse}");

            // Deserialize the JSON response to historyData
            var options = new JsonSerializerOptions { PropertyNameCaseInsensitive = true };
            var jsonDocument = JsonDocument.Parse(jsonResponse);
            var rootElement = jsonDocument.RootElement.GetProperty("results");
            Console.WriteLine("1");
            historyData = JsonSerializer.Deserialize<List<HistoryData>>(rootElement.GetRawText(), options);
            Console.WriteLine("2");
            // Show the historical data first
            loading = false;

            // Fetch real results
            await FetchRealResults();
            Console.WriteLine("3");

            // Calculate accuracy
            accuracy = await ApiService.GetAccuracy(historyData);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching history data: {ex.Message}");
        }
        finally
        {
            isCalculating = false;
        }
    }

    private async Task FetchRealResults()
    {
        var tasks = historyData.Select(async result =>
        {
            var realResult = await ApiService.GetActualResult(result.ticker, result.Date, result.integrated_output.general_prediction, result.closing_price);
            result.real_result = realResult;
            // Trigger UI update
            StateHasChanged();
        });

        await Task.WhenAll(tasks);
    }
}
